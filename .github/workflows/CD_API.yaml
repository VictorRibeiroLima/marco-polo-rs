name: Deploy API to ECR

on:
  push:
    branches:
      - master

env:
  AWS-REGION: sa-east-1

  ECS_TASK_DEFINITION: ./.aws/api_ecs_task_definition.json
  ECS_SERVICE: marco-polo-api-prod-service
  ECS_CLUSTER: marco-polo-api-prod
  ECS_CONTAINER_NAME: marco-polo-api-prod

  ECR_REPOSITORY: marco-polo-api
  IMAGE_NAME: marco-polo-api


jobs:
    deploy:
      runs-on: ubuntu-latest
  
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Write .env
          run: npx dotenvenc -o ./.env -i ./env/.env.esc -d ${{ secrets.DOT_ENV_PASSWORD }}
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS-REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
  
        - name: Cache Docker layers
          uses: actions/cache@v2
          with:
            path: /var/lib/docker
            key: ${{ runner.os }}-docker-${{ env.AWS-REGION }}-${{ hashFiles('**/Dockerfile') }}
            restore-keys: |
              ${{ runner.os }}-docker-${{ env.AWS-REGION }}-

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f api/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.ECS_CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true